<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wudao的博客</title>
    <link>https://wudaore.github.io/</link>
    <description>Recent content on wudao的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Sep 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://wudaore.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>李宏毅-深度学习课程学习笔记(3)</title>
      <link>https://wudaore.github.io/post/deeplearning-lhy3/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/deeplearning-lhy3/</guid>
      <description>0. 序 继续李宏毅-深度学习课程的学习，并结合课程对暑假做过的项目进行深度的理解和尝试复现. 1. receptive field 做图像识别时，让Neuron输入整个图片未免有些现实.给每个Neuron设置一个receptive fiel</description>
    </item>
    
    <item>
      <title>李宏毅-深度学习课程学习笔记(2)</title>
      <link>https://wudaore.github.io/post/deeplearning-lhy2/</link>
      <pubDate>Mon, 12 Sep 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/deeplearning-lhy2/</guid>
      <description>0. 序 继续李宏毅-深度学习课程的学习，并结合课程对暑假做过的项目进行深度的理解和尝试复现. 1. 通过正则化解决过拟合 1.1 正则化的基本原理（以岭回归为例） 正则化，岭回归等内容在之前的博客已经提及，原理不加赘述.</description>
    </item>
    
    <item>
      <title>李宏毅-深度学习课程学习笔记(1)</title>
      <link>https://wudaore.github.io/post/deeplearning-lhy1/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/deeplearning-lhy1/</guid>
      <description>0. 序 开始李宏毅-深度学习课程的学习，并结合课程对暑假做过的项目进行深度的理解和尝试复现. 1. pytorch中dataset的使用 要使用自己的数据集，首先要导入pytorch对应的库 from torch.utils.data import DataLoader,Dataset DataLoa</description>
    </item>
    
    <item>
      <title>CSS(4)</title>
      <link>https://wudaore.github.io/post/css4/</link>
      <pubDate>Fri, 22 Jul 2022 15:14:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/css4/</guid>
      <description>1. 序 对页面定位 position进行学习 使用position属性来设置定位 可选值： static 默认值，元素是静止的没有开启定位 relative 开启元素的相对定位 absolute 开启元素的绝对定位 fixed 开启元素的固定定位 sticky 开启元素的粘滞定位 2. 相对</description>
    </item>
    
    <item>
      <title>CSS(3)</title>
      <link>https://wudaore.github.io/post/css3/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/css3/</guid>
      <description>1. 序 对页面浮动 float进行学习 2. 浮动的简介与特点 通过浮动可以使一个元素向其父元素的左侧或右侧移动. 注意，元素设置浮动以后，水平布局的等式便不需要强制成立元素设置浮动以后，会完全从文档流中脱离，不再占</description>
    </item>
    
    <item>
      <title>NLP--RNN</title>
      <link>https://wudaore.github.io/post/nlp-rnn/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/nlp-rnn/</guid>
      <description>目录 1. 序 NLP&amp;ndash;RNN的学习 在普通的神经网络中，信息是单向传递的.这么做虽然让网络更容易学习，但是在很多的现实任务中，网络的输出不仅依赖于当前的输入，也依赖于过去的输出.此外，普通的神经网</description>
    </item>
    
    <item>
      <title>CSS(2)</title>
      <link>https://wudaore.github.io/post/css2/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/css2/</guid>
      <description>1. 序 对页面布局 layout进行学习 2. 文档流 文档流（normal flow） - 网页是一个多层的结构，一层摞着一层 - 通过CSS可以分别为每一层来设置样式 - 作为用户来讲只能看到最顶上一层 - 这些层中，最底下的一</description>
    </item>
    
    <item>
      <title>NLP--word embedding</title>
      <link>https://wudaore.github.io/post/nlp-word-embedding/</link>
      <pubDate>Thu, 14 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/nlp-word-embedding/</guid>
      <description>目录 序 NLP基础 文本情感分类 总结 1. 序 NLP&amp;ndash;word embedding的学习 2. RNN-NLP基础 2.1 N-gram N表示能够用在一起的词语的数量.使用N-gram模型时，往往将N个词语当成一个单位使用 区别于传统分词， N-gram</description>
    </item>
    
    <item>
      <title>pytorch基础(3)</title>
      <link>https://wudaore.github.io/post/pytorchb3/</link>
      <pubDate>Wed, 13 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/pytorchb3/</guid>
      <description>目录 序 pytorch数据加载器 pytorch自带数据集 数据处理方法 案例：手写数字识别 总结 1. 序 进一步学习Pytorch 2. pytorch数据加载器 定义数据类并读取数据： class SmsDataset(Dataset): def __init__(self): &amp;quot;&amp;quot;&amp;quot; 初始化 :param None: :return None: &amp;quot;&amp;quot;&amp;quot; self.file_path = &amp;quot;./data/SMSSpamCollection&amp;quot; self.lines =</description>
    </item>
    
    <item>
      <title>CSS(1)</title>
      <link>https://wudaore.github.io/post/css1/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/css1/</guid>
      <description>1. 序 机器学习也就图一乐，赚工资还得靠web. web也就图一乐，赚米还得靠想法. 总之先把工资赚了. web从前端开始，前端从html和css开始. 1.1 浏览器内核 chrome:webkit/blink ie:Trident Safari:webkit Firefox:Gecko Opera:Presto/blink 2. HTML基础 记一些知识点 1.写HT</description>
    </item>
    
    <item>
      <title>CSS的一些随笔</title>
      <link>https://wudaore.github.io/post/css_detail/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/css_detail/</guid>
      <description>1. 实现元素的居中的方法 1.1 水平居中 方法1： margin: xpx auto 方法2：见1.2的方法1 1.2 垂直居中 方法1： 使用绝对定位实现： 绝对定位中left 和 right的值默认是auto，所以如果不指定left和right，则等式不</description>
    </item>
    
    <item>
      <title>pytorch基础(2)</title>
      <link>https://wudaore.github.io/post/pytorchb2/</link>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/pytorchb2/</guid>
      <description>目录 序 pytorch模型实现线性回归 各种梯度下降算法 总结 1. 序 进一步学习Pytorch 2. pytorch模型实现线性回归 上一章中值给出了代码，这一章对代码进行详解. 2.1 nn.module init:自定义的方法实现的位置 fo</description>
    </item>
    
    <item>
      <title>pytorch基础(1)</title>
      <link>https://wudaore.github.io/post/pytorchb1/</link>
      <pubDate>Sat, 09 Jul 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/pytorchb1/</guid>
      <description>目录 序 神经元与神经网络 pytorch基础 梯度下降 pytorch手动实现线性回归 pytorch模型实现线性回归 总结 1. 序 NLP和CV学习之前需要的一些前置知识. 2. 神经元与神经网络 神经元是神经网络的基本单位</description>
    </item>
    
    <item>
      <title>CART决策树</title>
      <link>https://wudaore.github.io/post/cart/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/cart/</guid>
      <description>目录 CART树基本原理 CART建树 CART剪枝 CART回归树 CART模型树 总结 ps. 1. CART树基本原理 和ID3的切割特征所有取值相比，CART树使用了二元切割法.即，大于给定值的走左子树，小于的则走右子</description>
    </item>
    
    <item>
      <title>特征降维-奇异值分解SVD</title>
      <link>https://wudaore.github.io/post/svd/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/svd/</guid>
      <description>目录 SVD基本原理 SVD数学推导 相似度 SVD《实战》代码 总结 ps. 1. SVD基本原理 SVD就是将原始的数据集矩阵Data分解成三个矩阵U、Σ 和VT. 1.1 矩阵的拉伸和旋转 在了解SVD之前 首先要知道矩阵的拉伸和旋</description>
    </item>
    
    <item>
      <title>特征降维-主成分分析PCA</title>
      <link>https://wudaore.github.io/post/pca/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/pca/</guid>
      <description>目录 PCA基本原理 PCA数学推导 PCA代码实现 PCA接口实现 总结 ps. 1. PCA基本原理 太高维度的数据处理时会大大增加计算难度和时间.所以必要时需要对特征进行降维. PCA，主成分分析 是一种数据降维的方法. 首</description>
    </item>
    
    <item>
      <title>FP-growth算法</title>
      <link>https://wudaore.github.io/post/fp-growth/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/fp-growth/</guid>
      <description>目录 FP树基本原理 FP树源码 总结 ps. 1. FP树基本原理 在寻找频繁项集时，Apriori算法对于每个潜在的频繁项集都会扫描数据集判定给定模式是否频繁.在数据量大时运行会很慢. 而FP-groth算法通过构造F</description>
    </item>
    
    <item>
      <title>Apriori算法实现关联分析</title>
      <link>https://wudaore.github.io/post/apriori/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/apriori/</guid>
      <description>目录 Apriori关联分析基本原理 关联分析《实战》源码 关联规则基本原理 关联规则《实战》源码 总结 ps. 1. Apriori关联分析基本原理 频繁项集是指那些经常出现在一起的物品集合.使用频繁项集和关联规则，商家可</description>
    </item>
    
    <item>
      <title>k均值聚类算法</title>
      <link>https://wudaore.github.io/post/k-means/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/k-means/</guid>
      <description>目录 基本原理 《实战》源码 模型评估 算法优化 特征降维 API接口实现 案例-消费预测 总结 ps. 1. 基本原理 原理比较简单.首先随机设置k个簇的中心点，遍历每个点计算距离，将较近的点归于一个簇中.完毕后，更新簇的中心点</description>
    </item>
    
    <item>
      <title>集成学习</title>
      <link>https://wudaore.github.io/post/ensemble-learning/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/ensemble-learning/</guid>
      <description>目录 基本原理 bagging boosting 总结 ps. 1. 基本原理 即通过简历多个模型来解决单一预测问题.原理是生成多个分类器，各自独立学习得出预测结果，这些预测最后组成预测序列.因此优于任何一个单分类做出的预测. 对于欠拟合问题，使用b</description>
    </item>
    
    <item>
      <title>决策树学习</title>
      <link>https://wudaore.github.io/post/decision-tree/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/decision-tree/</guid>
      <description>目录 基本原理 度量方法 常用的剪枝方法 特征工程-特征提取 决策树的实现 决策树绘制 总结 ps. 1. 基本原理 决策树是一种树形结构，每个内部节点代表一个属性上的判断.每个叶节点代表一种分类结果.它的本质就是基于数据，通过</description>
    </item>
    
    <item>
      <title>逻辑回归学习</title>
      <link>https://wudaore.github.io/post/logistic-regression/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/logistic-regression/</guid>
      <description>目录 基本原理 逻辑回归的损失函数 逻辑回归的优化 随机梯度上升 分类评估方法 sklearn实现 总结 ps. 1. 基本原理 虽然叫回归但是其实解决的是二分类问题.逻辑回归的输入值为线性回归的输出值，即 之所以能解决二分类问题</description>
    </item>
    
    <item>
      <title>线性回归学习</title>
      <link>https://wudaore.github.io/post/linear-regression/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/linear-regression/</guid>
      <description>目录 基本原理 线性回归的损失优化 局部加权线性回归 正则化线性模型 逐步向前回归 sklearn用法 总结 ps. 1. 基本原理 1.1 分类和回归 区别在于分类问题是定性的，输出离散值（如+1，-1）.而回归问题是定量的，输出连续</description>
    </item>
    
    <item>
      <title>KNN学习</title>
      <link>https://wudaore.github.io/post/knn/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/knn/</guid>
      <description>Introduction 基本原理 各种距离 距离调参 KNN优化-KD树 数据处理（归一化和标准化） 实战&amp;ndash;鸢尾花数据集 总结 1. 基本原理 非常朴素的原理。根据距离最近的K个点来判断目标点的类别. 2. 各种距离 标准距离 汉明距离 杰卡</description>
    </item>
    
    <item>
      <title>matplotlib基础</title>
      <link>https://wudaore.github.io/post/hello_matplotlib/</link>
      <pubDate>Tue, 24 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/hello_matplotlib/</guid>
      <description>Introduction 对matplotlib的简易学习 import matplotlib.pyplot as plt import random matplotlib图像的绘制 # 1. 创建画布 # figsize 画布大小 dpi 像素 plt.figure(figsize=(20, 8), dpi=100) # 2.图像绘制 x = [1,2,3,4,5,6] y = [3,6,3,5,3,10] plt.plot(x, y) # 3.图像展示 plt.show() # help(plt.figure) 图像保存 # 1. 创建画布 plt.figure(figsize=(20, 8), dpi=100) # 2.图像绘</description>
    </item>
    
    <item>
      <title>svm学习(1)--基础概念和公式</title>
      <link>https://wudaore.github.io/post/svm1/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/svm1/</guid>
      <description>Introduction &amp;laquo;实战&amp;raquo;中的svm数学推导实在是有些晦涩难懂. bilibili视频教程：https://www.bilibili.com/video/BV1Hs411w7ci?spm_id_</description>
    </item>
    
    <item>
      <title>svm学习(2)--简易SMO算法代码理解</title>
      <link>https://wudaore.github.io/post/svm2/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/svm2/</guid>
      <description>Introduction SMO算法 即序列最小优化算法 对&amp;laquo;实战&amp;raquo;中的smoSimple函数尝试理解 def smoSimple(dataMatIn, classLabels, C, toler, maxIter): &amp;quot;&amp;quot;&amp;quot;smoSimple Args: dataMatIn 特征集合 classLabels 类别标签 C 松弛变量(常量值)，允许有些数据点可以处于分隔面的错误一侧。 控制</description>
    </item>
    
    <item>
      <title>svm学习(3)--SVM实现鸢尾花数据分类</title>
      <link>https://wudaore.github.io/post/svm3/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/svm3/</guid>
      <description>Introduction sklearn的SVM算法可以调整c值和核函数.本篇并未介绍核函数 导入数据和数据-标签的处理 from sklearn.svm import SVC from sklearn import datasets iris = datasets.load_iris() X = iris[&#39;data&#39;] X = iris[&#39;data&#39;][:,(2,3)] y = iris[&#39;target&#39;] SVM训练.c值设置为无穷大代表几乎不容错 使用线性核函数 setosa_or_versicolor = (y==0)|(y==1) X =</description>
    </item>
    
    <item>
      <title>ubuntu学习(1)--文件系统</title>
      <link>https://wudaore.github.io/post/ubuntu-filesys/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/ubuntu-filesys/</guid>
      <description>Introduction 系统的学习Linux对日常学习和之后的工作都有帮助 本篇博客记录学习ubuntu文件系统时遇到的问题和需要记录的点 1.ubuntu 常见目录</description>
    </item>
    
    <item>
      <title>windows下使用hugo搭建博客</title>
      <link>https://wudaore.github.io/post/creating-a-boke/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/creating-a-boke/</guid>
      <description>Introduction 本文主要介绍如何在windows下使用hugo搭建自己的博客并通过github挂载，同时绑定自己的域名 bilibili视频教程：https://www.bilibili.com/video/BV13</description>
    </item>
    
    <item>
      <title>In-post APlayer Test</title>
      <link>https://wudaore.github.io/post/aplayer-test/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/aplayer-test/</guid>
      <description>&lt;div class=&#34;post-player-wrapper&#34;&gt;
  &lt;div
    class=&#34;post-aplayer&#34;
    data-base=&#34;https://wudaore.github.io/&#34;
    data-urls=&#34;/aplayer/berlin.mp3&#34;
    data-names=&#34;Berlin&#34;
    data-artists=&#34;Crowander&#34;
    data-covers=&#34;/aplayer/crowander.jpg&#34;
  &gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This post is for in-post APlayer test, above is previous post-player.&lt;/p&gt;
&lt;p&gt;Music files are all downloaded from &lt;a href=&#34;https://freemusicarchive.org&#34; target=&#34;_blank&#34;&gt;Free Music Archive&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown Syntax</title>
      <link>https://wudaore.github.io/post/markdown-syntax/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wudaore.github.io/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://wudaore.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://wudaore.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://wudaore.github.io/post/math-typesetting/</link>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wudaore.github.io/post/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;
&lt;p&gt;In this example we will be using &lt;a href=&#34;https://katex.org/&#34; target=&#34;_blank&#34;&gt;KaTeX&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a partial under &lt;code&gt;/layouts/partials/math.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Within this partial reference the &lt;a href=&#34;https://katex.org/docs/autorender.html&#34; target=&#34;_blank&#34;&gt;Auto-render Extension&lt;/a&gt; or host these scripts locally.&lt;/li&gt;
&lt;li&gt;Include the partial in your templates like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;{{ if or .Params.math .Site.Params.math }}
{{ partial &amp;quot;math.html&amp;quot; . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To enable KaTex globally set the parameter &lt;code&gt;math&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in a project&amp;rsquo;s configuration&lt;/li&gt;
&lt;li&gt;To enable KaTex on a per page basis include the parameter &lt;code&gt;math: true&lt;/code&gt; in content files.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://wudaore.github.io/post/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wudaore.github.io/post/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc
caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis
lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://wudaore.github.io/post/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wudaore.github.io/post/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/emojify/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34; target=&#34;_blank&#34;&gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site’s &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34; target=&#34;_blank&#34;&gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:s ee_no_evil:[Remove the space]&lt;/code&gt; 🙈 &lt;code&gt;:h ear_no_evil:[Remove the space]&lt;/code&gt; 🙉 &lt;code&gt;:s peak_no_evil:[Remove the space]&lt;/code&gt; 🙊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CJK Unicode Test</title>
      <link>https://wudaore.github.io/post/cjk-unicode-test/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/cjk-unicode-test/</guid>
      <description>&lt;p&gt;The following is part of the CJK text, this page is for test use only.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>纯简体中文测试文章</title>
      <link>https://wudaore.github.io/post/wtf-article/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0800</pubDate>
      
      <guid>https://wudaore.github.io/post/wtf-article/</guid>
      <description>&lt;p&gt;本文内容无实际意义，由狗屁不通文章生成器自动生成，不代表作者本人观点。&lt;/p&gt;
&lt;p&gt;可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。一段代码写一天，到底应该如何实现。马克思在不经意间这样说过，一切节省，归根到底都归结为时间的节省。这不禁令我深思。马克思曾经说过，一切节省，归根到底都归结为时间的节省。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
